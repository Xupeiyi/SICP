#lang racket
(require "./two-dimension-table.rkt" "./generic.rkt")

; (define (real-part z) (apply-generic 'real-part z))
; (define (imag-part z) (apply-generic 'imag-part z))
; (define (magnitude z) (apply-generic 'magnitude z))
; (define (angle z) (apply-generic 'angle z))

; (define (add x y) (apply-generic 'add x y))
; (define (sub x y) (apply-generic 'sub x y))
; (define (mul x y) (apply-generic 'mul x y))
; (define (div x y) (apply-generic 'div x y))
; (define (sqrt x) (apply-generic 'sqrt x))
; (define (sine x) (apply-generic 'sine x))
; (define (cosine x) (apply-generic 'cosine x))
; (define (atan x) (apply-generic 'atan x))
; (define (equ? x y) (apply-generic 'equ? x y))

(define (install-rectangular-package) 
    ;; internal
    (define (square z) (mul z z))
    (define (real-part z) (car z))
    (define (imag-part z) (cdr z))
    (define (make-from-real-imag x y) (cons x y))
    (define (magnitude z) 
        (sqrt (add (square (real-part z)) 
                   (square (imag-part z)))))
    (define (angle z)
        (atan (div (imag-part z) (real-part z))))
    (define (make-from-mag-ang r a)
        (cons (mul r (cosine a))) (mul r (sine a)))

    ;; interface
    (define (tag x) (attach-tag 'rectangular x))
    (put 'real-part '(rectangular) real-part)
    (put 'imag-part '(rectangular) imag-part)
    (put 'magnitude '(rectangular) magnitude)
    (put 'angle '(rectangular) angle)
    (put 'make-from-real-imag 'rectangular
        (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang 'rectangular
        (lambda (r a) (tag (make-from-mag-ang r a)))) 
    'done)

(define (install-polar-package)
    ;; internal
    (define (square z) (mul z z))
    (define (magnitude z) (car z))
    (define (angle z) (cdr z))
    (define (make-from-mag-ang r a) (cons r a))
    (define (real-part z) 
        (mul (magnitude z) (cosine (angle z))))
    (define (imag-part z)
        (mul (magnitude z) (sine (angle z))))
    (define (make-from-real-imag x y)
        (cons (sqrt (add (square x) (square y))))
              (atan y x))
    ;; interface
    (define (tag x) (attach-tag 'polar x))
    (put 'real-part '(polar) real-part)
    (put 'imag-part '(polar) imag-part)
    (put 'magnitude '(polar) magnitude)
    (put 'angle '(polar) angle)
    (put 'make-from-mag-ang 'polar
        (lambda (r a) (tag (make-from-mag-ang r a))))
    (put 'make-from-real-imag 'polar
        (lambda (x y) (tag (make-from-real-imag x y))))
    'done)

(define (install-complex-package)
    (define (make-from-real-imag x y)
        ((get 'make-from-real-imag 'rectangular) x y))
    (define (make-from-mag-ang r a)
        ((get 'make-from-mag-ang 'polar) r a))
    (define (add-complex z1 z2) 
        (make-from-real-imag (add (real-part z1) (real-part z2))
                             (add (imag-part z1) (imag-part z2))))
    (define (sub-complex z1 z2)
        (make-from-real-imag (sub (real-part z1) (real-part z2))
                             (sub (imag-part z1) (imag-part z2))))
    (define (mul-complex z1 z2) 
        (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                           (add (angle z1) (angle z2))))
    (define (div-complex z1 z2) 
        (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                           (sub (angle z1) (angle z2))))
    (define (negate-complex z)
        (make-from-real-imag (negate (real-part z)) 
                             (negate (imag-part z))))
    (define (equ-complex? z1 z2)
        (and (equ? (real-part z1) (real-part z2)) 
             (equ? (imag-part z1) (imag-part z2))))
    (define (project-complex n)
        (let ((numer (numerator (real-part n)))
              (denom (denominator (real-part n))))
             ((get 'make 'rational) numer denom)))
    (define (tag z) (attach-tag 'complex z))
    (put 'add '(complex complex) 
        (lambda (z1 z2) (tag (add-complex z1 z2))))
    (put 'sub '(complex complex)
        (lambda (z1 z2) (tag (sub-complex z1 z2))))
    (put 'mul '(complex complex)
        (lambda (z1 z2) (tag (mul-complex z1 z2))))
    (put 'div '(complex complex)
        (lambda (z1 z2) (tag (div-complex z1 z2))))

    (put 'make-from-real-imag 'complex
        (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang 'complex
        (lambda (r a) (tag (make-from-mag-ang r a))))
    (put 'real-part '(complex) real-part)
    (put 'imag-part '(complex) imag-part)
    (put 'magnitude '(complex) magnitude)
    (put 'angle '(complex) angle)
    (put 'equ? '(complex complex) equ-complex?)
    (put 'negate '(complex) (lambda (z) (tag (negate-complex z))))
    (put '=zero? '(complex) (lambda (n) (= (magnitude n) 0)))
    (put 'project 'complex project-complex)
    'done) 

(provide install-complex-package install-rectangular-package install-polar-package)